import os
import gdown
import logging
from pathlib import Path

logger = logging.getLogger(__name__)

def download_model_from_drive(drive_url, model_path):
    """
    T·∫£i model t·ª´ Google Drive v·ªõi URL public
    """
    try:
        # T·∫°o th∆∞ m·ª•c models n·∫øu ch∆∞a c√≥
        os.makedirs(os.path.dirname(model_path), exist_ok=True)
        
        # Ki·ªÉm tra n·∫øu model ƒë√£ t·ªìn t·∫°i
        if os.path.exists(model_path):
            logger.info(f"‚úÖ Model already exists at: {model_path}")
            return True
        
        logger.info(f"üîÑ Downloading model from Google Drive...")
        logger.info(f"üìÅ Target path: {model_path}")
        
        # Tr√≠ch xu·∫•t file ID t·ª´ Google Drive URL
        if "drive.google.com" in drive_url:
            if "/file/d/" in drive_url:
                file_id = drive_url.split("/file/d/")[1].split("/")[0]
            elif "id=" in drive_url:
                file_id = drive_url.split("id=")[1].split("&")[0]
            else:
                raise ValueError("Invalid Google Drive URL format")
        else:
            raise ValueError("URL is not a Google Drive link")
        
        # T·∫°o direct download URL
        download_url = f"https://drive.google.com/uc?id={file_id}"
        
        # T·∫£i file
        gdown.download(download_url, model_path, quiet=False)
        
        # Ki·ªÉm tra file ƒë√£ t·∫£i th√†nh c√¥ng
        if os.path.exists(model_path) and os.path.getsize(model_path) > 0:
            file_size = os.path.getsize(model_path) / (1024 * 1024)  # MB
            logger.info(f"‚úÖ Model downloaded successfully! Size: {file_size:.2f}MB")
            return True
        else:
            logger.error("‚ùå Downloaded file is empty or corrupted")
            if os.path.exists(model_path):
                os.remove(model_path)
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error downloading model: {str(e)}")
        # X√≥a file l·ªói n·∫øu c√≥
        if os.path.exists(model_path):
            try:
                os.remove(model_path)
            except:
                pass
        return False

def ensure_model_available(drive_url, model_path):
    """
    ƒê·∫£m b·∫£o model c√≥ s·∫µn, t·∫£i t·ª´ Drive n·∫øu c·∫ßn
    """
    if not os.path.exists(model_path):
        logger.info("üîç Model not found locally, downloading from Google Drive...")
        return download_model_from_drive(drive_url, model_path)
    else:
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size = os.path.getsize(model_path)
        if file_size < 1024 * 1024:  # Nh·ªè h∆°n 1MB c√≥ th·ªÉ l√† file l·ªói
            logger.warning("‚ö†Ô∏è Model file seems too small, re-downloading...")
            os.remove(model_path)
            return download_model_from_drive(drive_url, model_path)
        else:
            logger.info(f"‚úÖ Model found locally: {model_path}")
            return True
